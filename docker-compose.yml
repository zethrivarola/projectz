version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16.1-alpine
    container_name: zeth-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-zeth_photography}
      POSTGRES_USER: ${POSTGRES_USER:-zeth_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    command:
      - postgres
      - -c
      - log_statement=all
      - -c
      - log_min_duration_statement=0
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-zeth_user} -d ${POSTGRES_DB:-zeth_photography}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - zeth-network

  # Redis Cache
  redis:
    image: redis:7.2.4-alpine
    container_name: zeth-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - zeth-network

  # MinIO S3-compatible storage
  minio:
    image: minio/minio:RELEASE.2024-03-26T22-10-45Z
    container_name: zeth-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - zeth-network

  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: zeth-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-zeth_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-zeth_photography}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-zeth-photos}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD_HASH: ${ADMIN_PASSWORD_HASH}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
    volumes:
      - app_uploads:/app/uploads
    ports:
      - "${APP_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - zeth-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:1.25.4-alpine
    container_name: zeth-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app
    networks:
      - zeth-network
    profiles:
      - nginx

volumes:
  postgres_data:
    name: zeth_postgres_data
  redis_data:
    name: zeth_redis_data
  minio_data:
    name: zeth_minio_data
  app_uploads:
    name: zeth_app_uploads
  nginx_cache:
    name: zeth_nginx_cache

networks:
  zeth-network:
    name: zeth-network
    driver: bridge
